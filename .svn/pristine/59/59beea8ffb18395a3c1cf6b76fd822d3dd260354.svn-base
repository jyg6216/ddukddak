<%@ page language="java" contentType="text/html; charset=UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags"  %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>
<style>

.chart1 {
	height: 100%;
	width: 20%;
}

.chart2 {
	height: 100%;
	width: 60%;
}

.chart3 {
	height: 48.5%;
	width: 100%;
}

.chart4 {
	margin-top: 6%;
	height: 48.5%;
	width: 100%;
}

.chart-wrap {
	height: 100%;
	width: 20%;
}

.div-info-top {
	margin-top: 10%;
	display:flex;
	justify-content: space-around;
	color: #F8F9FC;
}

.div-info {
	display:flex;
	justify-content: space-around;
}

.div-info:hover {
	background-color: #EDF8F9;
}

.div-info p {
	margin-top:3%;
	margin-bottom:3%;
}

.info1 {
	width: 40px;
}

.info2 {
	width: 120px;
}

.info3 {
	width: 100px;
}

.selected {
    background-color: #EDF8F9;
}

.myhr {
	width: 954px;
	height: 1px;
	flex-shrink: 0;
	background: #EBEFF0;
	margin-left: -24px;
}

.aside-ams-patient{
	width: 196px;
	border-radius: 16px 0px 0px 16px;
	background: var(--bg-02, #DBF2F4);
	height: 56px;
	border-right: 4px solid var(--ci-01, #0ABAB5);
	margin-left: 4px;
	color: var(--ci-01, #0ABAB5);
}

.patient-detail {
	width: 1206px;
	height: 100%;
	flex-shrink: 0;
}	
.patient-note {
	width: 360px;
}

.search{
	background-image: url(/resources/images/Search.png);
	background-repeat: no-repeat;
	background-position: 252px center;
	width: 292px;
	height: 48px;
}

.record-input{
	background-image: url(/resources/images/Arrowupward.png);
	background-repeat: no-repeat;
	background-position: 272px center;
	width: 312px;
	height: 48px;
}

.dduk-vertical-line {
	height: 642px;
	margin-top: -18px;
	margin-left: 272px;
}

hr{
	margin: -8px 0 16px -16px;
	background: var(--border, #EBEFF0);
	height: 1px;
}

.record-content-fr {
	height: 343px;
}

.notice-text {
	height: 100%;
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    font-size: 1.7em;
}

.gap-ver-16 {
	height: 94.5%;
}

.record-content-fr {
	height: 100%;
	width: 284px; 
}

.btn-state {
	font-size: 10.9px;
    padding: 4px 8px;
    width: 100%;
}

.dduck-input {
	position: relative;
    z-index: 99;
}

.reason-box {
	width: 90%;
	height: 100px;
	resize: none;
}

.opinion-box {
	width: 90%;
	height: 150px;
	resize: none;
}

.injury-name-box {
	width: 90%;
	height: 50px;
	resize: none;
}

.d-flex {
	position: relative;
}

.tr-column {
	background: #F8F9FC;
}

.clinic-table {
	text-align: center;
	width: 100%;
}

.injury-list-table {
	text-align: center;
}

.td-padding-data {
	pading: 0px;
}

.record-scroll { 
	height: 680px;
	overflow-y: scroll;
	-ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none;
}

.record-scroll::-webkit-scrollbar {
	display: none;
}

.patient-record {
	width:914px;
}

.clinic-opinion-flex {
	display: flex;
	justify-content: space-around;
}

#keyword {
	width: 60%;
	margin-left: 20%; 
	margin-bottom: 4%;
} 

.orderset-head {
	height: 10%;
}

.orderset-body {
	height: 384px;
	overflow-y: scroll;
	border-radius: 24px;
    border: 1px solid var(--border, #E0E8E6);
    padding: 16px;
    background: var(--white, #FFF);
}

svg{
	cursor: pointer;
}

#ordersetType {
	margin-top: 20px;
}

#ordersetName {
	width: 215px;
}

#searchOrderset {
	width: 520px;
}

.order-select {
	width: 220px;
	height: 30px;
}

.jstree-search {
	font-style: normal !important;
	font-weight: bold;
	color: #0abab5 !important;
	background-color: #fff;
}

/* 오더세트 검색 후 결과에 css주기 */
.searchResultList > div.active {
  background: #333;
  color: #eee;
}

/* 쓰레기통 아이콘 */
#trashbin {
	width: 16px;
	height: 16px;
	margin-top: 1%;
	cursor: pointer;
}

/* 검색 스타일 시작 */
.arrow {
    position: absolute;
    margin: -4.5% 0% 0% 72%;
    width: 16px;
}

.input-search-value {
	width: 520px;
    height: 48px;
    flex-shrink: 0;
    border-radius: 12px;
    border: 1px solid var(--border, #EBEFF0);
    background: var(--bg-01, #F8F9FC);
    color: var(--black-01, #333);
    font-family: 'Pretendard5';
    font-size: 14px;
    font-style: normal;
    line-height: 160%;
    padding-left: 16px;
    margin: 8px 0px 0px 0px;
}

.table-search {
	width: 520px;
	height: 48px;
    border: 1px solid var(--border, #EBEFF0);
    background: var(--bg-01, #F8F9FC);
    color: var(--black-01, #333);
    font-family: 'Pretendard5';
    font-size: 14px;
    font-style: normal;
    padding-left: 16px;
    border-collapse: collapse;
    visibility: hidden;
    position: absolute;
}

.tbody-search {
	position: relative;
}

.order-search {
	width: 590px;
	height: 48px;
    border: 1px solid var(--border, #EBEFF0);
    background: var(--bg-01, #F8F9FC);
    color: var(--black-01, #333);
    font-family: 'Pretendard5';
    font-size: 14px;
    font-style: normal;
    padding-left: 16px;
    border-collapse: collapse;
    visibility: hidden;
    position: absolute;
}

.order-body-search {
	position: relative;
}

.table-result {
	margin: 8px 0px 0px 0px;
	width: 520px;
	height: 48px;
	border-style : hidden;
 	box-shadow : 0 0 0 1px #EBEFF0;
    border-radius: 12px;
    background: var(--bg-01, #F8F9FC);
    color: var(--black-01, #333);
    font-family: 'Pretendard5';
    font-size: 14px;
    font-style: normal;
    padding-left: 16px;
    border-collapse: collapse;
}

.table-order-result {
	margin: 8px 0px 0px 0px;
	width: 590px;
	height: 48px;
	border-style : hidden;
 	box-shadow : 0 0 0 1px #EBEFF0;
    border-radius: 12px;
    background: var(--bg-01, #F8F9FC);
    color: var(--black-01, #333);
    font-family: 'Pretendard5';
    font-size: 14px;
    font-style: normal;
    padding-left: 16px;
    border-collapse: collapse;
}

.table-search tbody * {
	padding: 2%;
}

.order-search tr * {
	padding: 2%;
}

.table-search tr:hover {
  background: #DBF2F4;
}

.order-search tr:hover {
  background: #DBF2F4;
}

.table-search.active {
    visibility: visible;
}

.order-search.active {
    visibility: visible;
}

.table-search td {
	overflow: hidden;
  	text-overflow: ellipsis;
}

.order-search td {
	overflow: hidden;
  	text-overflow: ellipsis;
}

.dduk-login-d {
    margin-bottom: 24px;
    margin-left: 5%;
    width: 300px;
}
/* 검색 스타일 끝 */

</style>
<c:import url="../common/modal.jsp"></c:import>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css" />
<div class="dduk-body-border patient-list">
		<div>
			<div class="dduk-title-area">
				<h2>대기환자 목록</h2>
			</div>
			<div class="dduk-x-pd8">
				<table class="patient-list-table" id="waitingQueue">
					<tr class="tr-padding">
						<th class="td-padding gray-text" style="width:40px;">No</th>
						<th class="td-padding gray-text paName" style="width:90px;">이름</th>
						<th class="td-padding gray-text" style="width:90px">생년월일</th>
						<th class="td-padding gray-text" style="text-align:center">상태</th>
					</tr>
				</table>
			</div>	
		</div>
	</div>
	
	<div class="dduk-body-border patient-detail"  style="position: relative;">
		<div class="dduk-title-area spa-betw">
			<div class="d-flex align-items-center">
				<h2 id="paName">환자를 선택해주세요</h2>
				<span id="paInfo" class="gray-text mar-b-8 mar-l-8"></span>
			</div>
				<div class="d-flex">
					<div class="d-flex patient-info" style="margin-left:-5%; margin-right:5%">
						<div class="d-flex">
							<span class="gray-text">신장&nbsp;&nbsp;</span><div id="paInfoHeight">--</div>
						</div>
						<div class="d-flex">
							<span class="gray-text">체중&nbsp;&nbsp;</span><div id="paInfoWeight">--</div>
						</div>
						<div class="d-flex">
							<span class="gray-text">혈액형&nbsp;&nbsp;</span><div id="paInfoBldType">--</div>
						</div>
					</div>
					<button class="dduk-btn-normal">상세보기</button>
				</div>
		</div>
		<hr style="width: 892px;">
		<div class="d-flex">
			<div class="dduk-history">
				<div style="height: 90%">
					<div class="subTitle-margin">
						<h2>진료 이력</h2>
					</div>
					<div class="history-scroll">
						<!-- 환자 진료내역 들어오는곳 -->
						<div class="notice-text">환자를 선택해주세요</div>
					</div>
				</div>
			</div>
			<!-- 진료진행 -->
			<div class="patient-record" id="currentRecord">
				<div class="subTitle-margin">
					<h2>진료 기록</h2>
				</div>
				<div class="gap-ver-16">
					<div class="dduk-inner-border record-content-fr record-scroll w-100">
						<div class="clinic-opinion-flex w-100">				
						<div class="textarea-wrap w-100">
							<h3>내원사유</h3>
							<textarea class="dduck-input reason-box" readonly="readonly"></textarea>
							<h3>진단명</h3>
							<textarea class="dduck-input injury-name-box"></textarea>
							<br><br>
							<h3>소견</h3>
							<textarea class="dduck-input opinion-box"></textarea>
						</div>
						<div class="w-100 orderset-wrap">
							<div class="orderset-head d-flex">
								<h3 style="width:70px">오더세트</h3>
								<svg id="createOrderset" type="button" data-bs-toggle="modal" data-bs-target="#createOrdersetModal" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
									<g clip-path="url(#clip0_142_1638)">
									<path d="M18 13H13V18C13 18.55 12.55 19 12 19C11.45 19 11 18.55 11 18V13H6C5.45 13 5 12.55 5 12C5 11.45 5.45 11 6 11H11V6C11 5.45 11.45 5 12 5C12.55 5 13 5.45 13 6V11H18C18.55 11 19 11.45 19 12C19 12.55 18.55 13 18 13Z" fill="#8D9EA5"></path>
									</g>
									<defs>
									<clipPath id="clip0_142_1638">
									<rect width="24" height="24" fill="white"></rect>
									</clipPath>
									</defs>
								</svg>
								<img id="trashbin" src="/resources/images/icons/trashbin.png">
								<input type="text" class="dduck-input" id="keyword" placeholder="검색">
							</div>
							<div class="orderset-body dduk-inner-border">
							
							</div>
						</div>
					</div>
						
						<br><br>
						<!-- 상병진단부분 -->
						<div class="d-flex">
							<h3>상병진단</h3>
							<svg class="btn-order-modal" data-type="injury" type="button" data-bs-toggle="modal" data-bs-target="#createOrderModal"  xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
								<g clip-path="url(#clip0_142_1638)">
									<path d="M18 13H13V18C13 18.55 12.55 19 12 19C11.45 19 11 18.55 11 18V13H6C5.45 13 5 12.55 5 12C5 11.45 5.45 11 6 11H11V6C11 5.45 11.45 5 12 5C12.55 5 13 5.45 13 6V11H18C18.55 11 19 11.45 19 12C19 12.55 18.55 13 18 13Z" fill="#8D9EA5"/>
								</g>
								<defs>
									<clipPath id="clip0_142_1638">
										<rect width="24" height="24" fill="white"/>
									</clipPath>
								</defs>
							</svg>
						</div>
						<table class="clinic-table injury-list-table">
							<tr class="tr-padding tr-column">
								<th class="td-padding gray-text" style="width:50px">코드</th>
								<th class="td-padding gray-text" style="width:100px">구분</th>
								<th class="td-padding gray-text" style="width:170px">한글명</th>
								<th class="td-padding gray-text" style="width:340px">영문명</th>
							</tr>
							<tr>
								<td id="defaultInjury" colspan="4">상병진단을 추가해주세요</td>
							</tr>
						</table>
						<br>
						<!-- 검사오더부분 -->
						<div class="d-flex">
							<h3>검사오더</h3>
							<svg class="btn-order-modal" data-type="test" type="button" data-bs-toggle="modal" data-bs-target="#createOrderModal" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
								<g clip-path="url(#clip0_142_1638)">
								<path d="M18 13H13V18C13 18.55 12.55 19 12 19C11.45 19 11 18.55 11 18V13H6C5.45 13 5 12.55 5 12C5 11.45 5.45 11 6 11H11V6C11 5.45 11.45 5 12 5C12.55 5 13 5.45 13 6V11H18C18.55 11 19 11.45 19 12C19 12.55 18.55 13 18 13Z" fill="#8D9EA5"></path>
								</g>
								<defs>
								<clipPath id="clip0_142_1638">
								<rect width="24" height="24" fill="white"></rect>
								</clipPath>
								</defs>
							</svg>
						</div>
						<table class="clinic-table test-list-table">
							<tr class="tr-padding tr-column">
								<th class="td-padding gray-text" style="width:60px;">코드</th>
								<th class="td-padding gray-text" style="width:80px;">구분</th>
								<th class="td-padding gray-text" style="width:180px">한글명</th>
								<th class="td-padding gray-text">영문명</th>
							</tr>
							<tr class="tr-padding tr-data">
								<td class="td-padding-data gray-text" style="widtd:60px;">M0086</td>
								<td class="td-padding-data gray-text" style="widtd:80px;">구분</td>
								<td class="td-padding-data gray-text" style="widtd:180px">대퇴골두 무혈성 괴사</td>
								<td class="td-padding-data gray-text">avascular necrosis of tde femoral head</td>
							</tr>
							<tr class="tr-padding tr-data">
								<td class="td-padding-data gray-text" style="widtd:60px;">M0086</td>
								<td class="td-padding-data gray-text" style="widtd:80px;">구분</td>
								<td class="td-padding-data gray-text" style="widtd:180px">대퇴골두 무혈성 괴사</td>
								<td class="td-padding-data gray-text">avascular necrosis of tde femoral head</td>
							</tr>
						</table>
						<br>
						<!-- 처방오더부분 -->
						<div class="d-flex">
							<h3>처방오더</h3>
							<svg class="btn-order-modal" data-type="medicine" type="button" data-bs-toggle="modal" data-bs-target="#createOrderModal" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
								<g clip-path="url(#clip0_142_1638)">
								<path d="M18 13H13V18C13 18.55 12.55 19 12 19C11.45 19 11 18.55 11 18V13H6C5.45 13 5 12.55 5 12C5 11.45 5.45 11 6 11H11V6C11 5.45 11.45 5 12 5C12.55 5 13 5.45 13 6V11H18C18.55 11 19 11.45 19 12C19 12.55 18.55 13 18 13Z" fill="#8D9EA5"></path>
								</g>
								<defs>
								<clipPath id="clip0_142_1638">
								<rect width="24" height="24" fill="white"></rect>
								</clipPath>
								</defs>
							</svg>
						</div>
						<table class="clinic-table madicine-list-table">
							<tr class="tr-padding tr-column">
								<th class="td-padding gray-text" style="width:60px;">코드</th>
								<th class="td-padding gray-text" style="width:80px;">구분</th>
								<th class="td-padding gray-text" style="width:180px">한글명</th>
								<th class="td-padding gray-text">영문명</th>
							</tr>
							<tr class="tr-padding tr-data">
								<td class="td-padding-data gray-text" style="widtd:60px;">M0086</td>
								<td class="td-padding-data gray-text" style="widtd:80px;">구분</td>
								<td class="td-padding-data gray-text" style="widtd:180px">대퇴골두 무혈성 괴사</td>
								<td class="td-padding-data gray-text">avascular necrosis of tde femoral head</td>
							</tr>
							<tr class="tr-padding tr-data">
								<td class="td-padding-data gray-text" style="widtd:60px;">M0086</td>
								<td class="td-padding-data gray-text" style="widtd:80px;">구분</td>
								<td class="td-padding-data gray-text" style="widtd:180px">대퇴골두 무혈성 괴사</td>
								<td class="td-padding-data gray-text">avascular necrosis of tde femoral head</td>
							</tr>
						</table>
						<br>
						<!-- 치료오더부분 -->
						<div class="d-flex">
							<h3>치료오더</h3>
							<svg class="btn-order-modal" data-type="treatment" type="button" data-bs-toggle="modal" data-bs-target="#createOrderModal" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
								<g clip-path="url(#clip0_142_1638)">
								<path d="M18 13H13V18C13 18.55 12.55 19 12 19C11.45 19 11 18.55 11 18V13H6C5.45 13 5 12.55 5 12C5 11.45 5.45 11 6 11H11V6C11 5.45 11.45 5 12 5C12.55 5 13 5.45 13 6V11H18C18.55 11 19 11.45 19 12C19 12.55 18.55 13 18 13Z" fill="#8D9EA5"></path>
								</g>
								<defs>
								<clipPath id="clip0_142_1638">
								<rect width="24" height="24" fill="white"></rect>
								</clipPath>
								</defs>
							</svg>
						</div>
						<table class="clinic-table treatment-list-table">
							<tr class="tr-padding tr-column">
								<th class="td-padding gray-text" style="width:60px;">코드</th>
								<th class="td-padding gray-text" style="width:80px;">구분</th>
								<th class="td-padding gray-text" style="width:180px">한글명</th>
								<th class="td-padding gray-text">영문명</th>
							</tr>
							<tr class="tr-padding tr-data">
								<td class="td-padding-data gray-text" style="widtd:60px;">M0086</td>
								<td class="td-padding-data gray-text" style="widtd:80px;">구분</td>
								<td class="td-padding-data gray-text" style="widtd:180px">대퇴골두 무혈성 괴사</td>
								<td class="td-padding-data gray-text">avascular necrosis of tde femoral head</td>
							</tr>
							<tr class="tr-padding tr-data">
								<td class="td-padding-data gray-text" style="widtd:60px;">M0086</td>
								<td class="td-padding-data gray-text" style="widtd:80px;">구분</td>
								<td class="td-padding-data gray-text" style="widtd:180px">대퇴골두 무혈성 괴사</td>
								<td class="td-padding-data gray-text">avascular necrosis of tde femoral head</td>
							</tr>
						</table>
					</div>
				</div>
			</div>
			<!-- 진료진행 끝 -->
			<!-- 진료기록조회 -->
			<!-- id="pastRecord" -->
			<!-- 진료기록조회끝 -->
		</div>
		
	</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/jstree.min.js"></script>
<script>
$(function(){
	
	// 최초 1번 대기목록 갱신
	// 굳이 Ajax를 이용해 동적으로 추가하는 이유는 Websocket을 이용해 실시간으로 대기 환자 갱신을 위해
	loadReceptionList();

	
	// 대기환자 목록 갱신
	$(document).on("click", ".tr-paInfo", function() {
		
		let paNo = $(this).data('pano');
		let hsrpReason = $(this).data('hsrpreason');
		
		// 환자의 진료를 시작할건지 물어본다(SweetAlert2)
		Swal.fire({
			title: '진료를 시작하시겠습니까???',
			icon: 'question',
			showCancelButton: true,
			confirmButtonColor: '#0ABAB5',
			cancelButtonColor: '#8D9EA5',
			confirmButtonText: '확인',
			cancelButtonText: '취소'
		}).then((result) => {
			// 확인버튼 클릭시
			if (result.isConfirmed) {
            	// 이전에 선택된 요소의 클래스 초기화
                $(".tr-paInfo").removeClass("selected");
                // 현재 클릭한 요소에 select클래스 추가
                $(this).addClass("selected");
                // 클릭한 환자의 진료목록 갱신
                simpleClinicChartList(paNo);
                // 내원사유 갱신
                $('.reason-box').html(hsrpReason);
			}
		})
    });
	
	
	// 환자의 진료정보를 클릭할 시 이벤트(진료상세 출력)
	$(document).on("click", ".dduk-history-list", function(){
		
		let clinicNo = $(this).data("clinicno");
		
		// 이전에 선택된 요소의 클래스 초기화
        $(".dduk-history-list").removeClass("selected");
        // 현재 클릭한 요소에 select클래스 추가
        $(this).addClass("selected");
        // 클릭한 진료의 상세내역 가져오기
        clinicChartDetail(clinicNo);
	});
	
	
	// 환자 대기목록 갱신
	function loadReceptionList(){
		$.ajax({
			url: '/ams/getReceptionList',
			dataType: 'json',
			type: 'post',
			beforeSend:function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
			},
			success: function(rst){
				
				console.log("환자 대기목록VO List", rst);
				
				$.each(rst, function(index){
					let paInfo = "";
					paInfo += '<tr class="tr-padding tr-paInfo" data-paNo="'+rst[index].paNo+'" data-hsrpReason="'+rst[index].hsrpReason+'">';
					paInfo += '<td class="td-padding">'+(index + 1)+'</td>';
					paInfo += '<td height="48px" class="td-padding">'+truncateText(rst[index].paName, 4)+'</td>';
					paInfo += '<td class="td-padding">'+ formatResidentNumber(rst[index].paReg) +'</td>';
					paInfo += '<td class="td-padding">';
					
					// 진료상태코드 가져오기
					let clinicState = rst[index].clinicState;
					
					if(clinicState == null){
						paInfo += '<button class="dduk-btn-disabled btn-state">대기중</button>';
					}
					if(clinicState == 'CRST01'){
						paInfo += '<button class="dduk-btn-info btn-state">진료중</button>';
					}
					if(clinicState == 'CRST02'){
						paInfo += '<button class="dduk-btn-normal btn-state">검사중</button>';
					}
					if(clinicState == 'CRST03'){
						paInfo += '<button class="dduk-btn-active btn-state">검사완료</button>';
					}
					
					paInfo += '</td>';
					paInfo += '</tr>';
					
					$('#waitingQueue').append(paInfo);
				});
			},
			error: function(xhr, status, error){
				console.log('Error:', xhr, status, error);
			}
		});
	}
	
	
	// 환자의 진료목록 갱신
	function simpleClinicChartList(paNo){
		$.ajax({
			url: '/clinic/simpleClinicChartList',
			dataType: 'json',
			type: 'post',
			data: {"paNo": paNo},
			beforeSend:function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
			},
			success: function(rst){
				
				console.log("특정 환자의 진료VO 리스트 : ", rst);
				
				// 환자 정보 출력
				let paBirthDay = formatResidentNumber(rst.paReg);
				let paAge = getAge(paBirthDay);
				$('#paName').html(rst.paName);
				$('#paInfo').html(rst.paSex + ", "+paAge+"세("+paBirthDay+")");
				$('#paInfoHeight').html(rst.paHeight + "cm");
				$('#paInfoWeight').html(rst.paWeight + "kg");
				$('#paInfoBldType').html(rst.paBldType + "형");
				
				// 진료 이력 초기화
				$('.history-scroll').html("");
				
				// 진료 이력이 없을시 없다는 메시지 출력
				if(rst.clinicChartVOList[0].clinicNo == null){
					$('.history-scroll').append('<div class="notice-text">진료 이력이 없습니다</div>');
				} else {
					
					// 진료 이력이 있을시 화면에 출력
					$.each(rst.clinicChartVOList, function(index){
						// 진료일자
						let clinicDate = formatDateString(rst.clinicChartVOList[index].clinicDt);
					
						let paClinicList = "";
					
						paClinicList += '<div class="dduk-history-list" data-clin   icNo='+rst.clinicChartVOList[index].clinicNo+'>';
						paClinicList += '<div class="history-array">';
						paClinicList += '<div>';
						paClinicList += '<div class="history-title">내원·'+clinicDate+'</div>';
						paClinicList += '<div>담당의 '+ rst.clinicChartVOList[index].empName+'</div>';
						paClinicList += '</div>';
						paClinicList += '</div>';
						paClinicList += '<div class="d-flex history-btn-list">';
						paClinicList += '<span class="history-btn">진료</span>';
						// 진료정보의 첫번째 vo를 뒤져봤는데 의약품 정보가 없을 때(처방을 안받았을 때)					
						if(rst.clinicChartVOList[index].testOrderVOList[0].testCd != null){
							paClinicList += '<span class="history-btn">검사</span>';
						}
						// 진료정보의 첫번째 vo를 뒤져봤는데 의약품 정보가 없을 때(처방을 안받았을 때)					
						if(rst.clinicChartVOList[index].treatmentOrderVOList[0].tmCd != null){
							paClinicList += '<span class="history-btn">치료</span>';
						}
						// 진료정보의 첫번째 vo를 뒤져봤는데 의약품 정보가 없을 때(처방을 안받았을 때)					
						if(rst.clinicChartVOList[index].medicineOrderVOList[0].mediCd != null){
							paClinicList += '<span class="history-btn">처방</span>';
						}
						paClinicList += '</div>';
						paClinicList += '</div>';
					
						$('.history-scroll').append(paClinicList);
						
					});
				
				}
			},
			error: function(xhr, status, error){
				console.log('Error:', xhr, status, error);
			}
		});
	}
	
	
	// 진료의 상세내역 불러오기
	function clinicChartDetail(clinicNo){
		$.ajax({
			url: '/clinic/clinicChartDetail',
			dataType: 'json',
			type: 'post',
			data: {"clinicNo": clinicNo},
			beforeSend:function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
			},
			success: function(rst){
				console.log("특정 진료의 상세내역VO", rst);
				
				$.each(rst, function(index, clinicChartVO){
					
				});
			},
			error: function(xhr, status, error){
				console.log('Error:', xhr, status, error);
			}
		})
	}
	
	
	// 오더, 진단 추가 스크립트 시작
	// 상병, 검사, 처방, 치료 4개의 추가버튼을 누를 때 그에 따른 전체 검색풀을 불러와서 searchPool에 할당
	var searchPool = [];
	// 검색결과 테이블 크기 조절을 위한 변수
	var width = [];
	
	$('.btn-order-modal').on('click', function(){
		
		// 검색 풀이 계속 쌓이는걸 방지하기 위해 초기화
		searchPool = [];
		let type = $(this).data('type');
		let searchUrl = '';
		
		// 선택한 추가 종류에 따라 모달의 제목 및 버튼의 id를 변경, url을 설정
		switch (type) {
 		case 'injury':
 			$('.order-title').html('상병진단 추가');
 			$('.btn-save-create-order').attr('id', 'btnSaveInjuryOrder');
 			searchUrl = '/orderSet/getInjuryVOList';
 			width = ['20px', '70px', '130px'];
 			break;
        case 'test':
        	$('.order-title').html('검사오더 추가');
        	$('.btn-save-create-order').attr('id', 'btnSaveTestOrder');
        	searchUrl = '/orderSet/getTestVOList';
        	width = [];
            break;
        case 'medicine':
        	$('.order-title').html('처방오더 추가');
        	$('.btn-save-create-order').attr('id', 'btnSaveMedicineOrder');
        	searchUrl = '/orderSet/getMedicineVOList';
        	width = [];
            break;
        case 'treatment':
        	$('.order-title').html('치료오더 추가');
        	$('.btn-save-create-order').attr('id', 'btnSaveTreatmentOrder');
        	searchUrl = '/orderSet/getTreatmentVOList';
        	width = [];
            break;
   		}
		
		// 선택한 카테고리에 따라 검색목록을 갱신
		$.ajax({
			url: searchUrl,
			dataType: 'json',
			type: 'post',
			beforeSend:function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
			},
			success: function(rst){
				console.log('진단, 오더추가 에서 오더카테고리에 따른 검색 풀 : ' , rst);
				
				// vo만큼 순회
				$.each(rst, function(index, vo){
					// 한 vo안의 모든 정보들을 담기위한 변수 
					let str = "";
					// vo안의 데이터 만큼 순회
					$.each(vo, function(index, column){
						// 검사일 때 가격은 안담아야됨
						// 처방일 때 약분류, 재고, 제조사, 보험적용여부, 총함량은 안가져와도 됨
						// 치료일 때 가격이랑 보험적용여부는 필요 없음
						if(index != 'testPrice' &&
							index != 'mediType' && index != 'mediStock' && index != 'mediMaker' && index != 'insuYn' && index != 'mediCont' && index != 'mediPrice' &&
							index != 'tmPrice' && index != 'insuYn'){
								str += (column + ',');
						}
					});
					
					searchPool.push(str);
				});
				
				console.log("갱신된 검색 풀", searchPool);
				
				updateSearchTable(searchPool, width);
			},
			error: function(xhr, status, error){
				console.log('Error:', xhr, status, error);
			}
		});
	});
	
	
	// 검색 결과인 searchPool을 테이블로 업데이트 시켜주는 함수
 	// data에는 검색결과의 배열이 들어오고
 	// width에는 내가 주고 싶은 각각의 td값의 width를 넣으면 된다
 	function updateSearchTable(data, width){
 		$('.order-search').html('');
 		let cont = "<tr>";
 		
 		// 우선 배열의 길이만큼 실행
 		$.each(data, function(index, str){
 			// ,를 정규식으로 만들어줌
 			let regex = new RegExp(',', 'g');
 			// 배열의 한 요소에서 , 의 개수를 파악 후 그 개수만큼 반복
 			let matches = str.match(regex);
 			let repeat = matches.length;
 			
 			// 배열 안의 구문자(,)의 개수만큼 실행 = td(컬럼)의 개수
 			for(let i = 0; i < repeat; i++){
 				let value = str.split(',')[i];
 				cont += "<td class='order-search-result' style='width:"+width[i]+"'>"+value+"</td>"
 			}
 			
 			cont += "</tr>"
 		})
 		
 		$('.order-search').append(cont);
 	}
	
	
 	// 검색결과 테이블 선택 시 검색결과 숨기기/보이기 및 선택한 결과를 반영
	$(document).on('click', '.order-search-result', function(){
		toggleSearchTable();
		
		// 더이상 카테고리를 바꾸면 안됨
		$("#ordersetCategory").prop("disabled", true);

		// 선택한 검색 결과를 input에 뒤집어씌움
		let clone = $(this).closest('tr').html();
		let cont = '<table class="table-order-result"><tr>' + clone + '<tr></table>';
		$('#orderSearch').html(cont);
		
		// 그다음 table-order-result 클래스를 제거시킴
		let tds = $('.table-order-result tr td');
		
		$.each(tds, function(index){
			tds.eq(index).attr('class', 'order-search-result-fixed');
		});
	});
	// 화살표 선택 시 검색결과 숨기기/보이기
	$(document).on('click', '.order-arrow', toggleSearchTable);


	// css를 이용해 검색창 숨기기/보이기
	function toggleSearchTable(){
		let $orderSearch = $('.order-search');
	    $orderSearch.toggleClass('active');
	}
	
	
	// 진단, 오더 추가 모달에서 검색 기능, 검색창에서 단어를 입력할 때 마다 실행
	$(document).on('keyup', '#searchOrder', function() {
		let value = $('#searchOrder').val().trim();
		let matchDataList = searchPool.filter((label) => label.includes(value));
		updateSearchTable(matchDataList, width);
	});
	
	
	// 진단, 오더 추가 모달에서 취소버튼을 누를 때
	$(document).on('click', '#btnCancelCreateOrder', resetOrdersetModal);
	// 상병추가 모달에서 저장 버튼을 누를 때
	$(document).on('click', '#btnSaveInjuryOrder', function(){
		if(!checkSelected()) return;
		addInjury();
		resetOrdersetModal();
	});
	// 검사오더추가 모달에서 저장 버튼을 누를 때
	$(document).on('click', '#btnSaveTestOrder', resetOrdersetModal);
	// 처방오더추가 모달에서 저장 버튼을 누를 때
	$(document).on('click', '#btnSaveMedicineOrder', resetOrdersetModal);
	// 치료오더추가 모달에서 저장 버튼을 누를 때
	$(document).on('click', '#btnSaveTreatmentOrder', resetOrdersetModal);
 	
	
	// 진단,오더 추가 모달에서 진단,오더를 골랐는지 확인하는 함수
	function checkSelected(){
		if($('#searchOrder').length){
			
			Swal.fire({
				title: '추가할 항목을 선택해주세요',
				icon: 'warning',
				confirmButtonColor: '#0ABAB5',
				confirmButtonText: '확인',
			})
			return false;
		}
		return true;
	}
	
	
	// 진단,오더 추가 모달의 내용을 초기화하는 함수
	function resetOrdersetModal(){
		
		// 카테고리 선택 다시 활성화
		$("#ordersetCategory").prop("disabled", false);
		
		let cont = '';
		cont += '<input type="text" id="searchOrder" class="input-search-value" autocomplet="off" />';
		cont +=	'<img src="/resources/images/icons/arrow.png" class="order-arrow"/>';
		$('#orderSearch').html(cont);
		
		// 모달 종료
		$("#createOrderModal").modal("hide");
		$(".fade").attr('style', 'display: none');
	}
	
	
	// 상병진단추가 모달에서 저장 버튼 누를 시
	function addInjury(){
		
		// 몇번째 병 진단인지 체크(radio 속성을 위해)
		index = $('.major').length + 1;
		
		let injuryCd = $('.table-order-result td').eq(0).text();
		let injuryNm = $('.table-order-result td').eq(1).text();
		let injuryEnm = $('.table-order-result td').eq(2).text();
		
		let cont = `
			<tr class="tr-padding tr-data">
				<td class="td-padding-data gray-text">\${injuryCd}</td>
				<td class="td-padding-data gray-text" style="padding-top:1%">
					<label for="major">주</label>
					<input type="radio" name="injuryType\${index}" class="major" value="major " />
					<label for="minor">부</label>
					<input type="radio" name="injuryType\${index}" class="minor" value="minor " />
					<label for="excluded">배제</label>
					<input type="radio" name="injuryType\${index}" class="excluded" value="excluded " />
				</td>
				<td class="td-padding-data gray-text">\${injuryNm}</td>
				<td class="td-padding-data gray-text">\${injuryEnm}</td>
			</tr>`;
			
		// 만약 기본 메세지가 남아있다면
		if($('#defaultInjury').length){
			$('#defaultInjury').remove();
		}
		$('.injury-list-table').append(cont);
		
		Swal.fire({
			title: '상병진단이 추가되었습니다',
			icon: 'success',
			confirmButtonColor: '#0ABAB5',
			confirmButtonText: '확인',
		})
	};
	
	
	// 검사오더추가 모달에서 저장 버튼 누를 시
	// 처방오더추가 모달에서 저장 버튼 누를 시
	// 치료오더추가 모달에서 저장 버튼 누를 시
	
	// 오더, 진단 추가 스크립트 끝
	
	
	// 주민번호를 생년월일로 변환
	function formatResidentNumber(residentNumber) {
		
		// 00~39년생은 20을 붙이고 그 외엔 19를 붙인다
	    let year = "";
	    if(Number(residentNumber.substr(0,1)) <= 3){
	    	year += "20";
	    } else {
	    	year += "19";
	    }
	    year += residentNumber.substr(0,2);
	    
	    
	    let month = residentNumber.substr(2,2);
	    let day = residentNumber.substr(4,2);
	    
	    let birthDay = year + "-" + month + "-" + day;
	    return birthDay;
	}
	
	
	// 주민번호로 만나이 계산
	function getAge(paBirthDay) {
		
		// 현재날짜, 생일로 날짜계산
	    const currentDate = new Date();
	    const birthdateDate = new Date(paBirthDay);
	    let age = currentDate.getFullYear() - birthdateDate.getFullYear();

	    // 현재와 생일의 월, 날짜 얻어주기
    	const currentMonth = currentDate.getMonth();
    	const birthdateMonth = birthdateDate.getMonth();
    	const currentDay = currentDate.getDate();
    	const birthdateDay = birthdateDate.getDate();

    	// 현재 날짜가 생년월일보다 앞 날짜면 아직 생일이 오지 않은 상태임(한살빼기)
    	if (currentMonth <= birthdateMonth && currentDay < birthdateDay) {
       		age--;
    	}

	    return age;
	}
	
	
	// 이름 등이 글자를 제어하고 싶을 때 maxLength까지만 표시
	function truncateText(text, maxLength) {
		if (text.length > maxLength) {
			return text.slice(0, maxLength) + '...';
		} else {
		    return text;
		}
	}
	
	
	// 날짜형식 데이터를 넣으면 yyyy-MM-dd(요일) 로 변환해주는 함수
	function formatDateString(dateString) {
		// 요일먼저 얻기
		const week = ['일', '월', '화', '수', '목', '금', '토'];
		const dayOfWeek = week[new Date(dateString).getDay()];
		
		const dateData = new Date(dateString);
		let year = dateData.getFullYear();
		let month = dateData.getMonth(); 
		let date = dateData.getDate()
		
		let dateStr = `\${year}-\${month}-\${date}(\${dayOfWeek})`;
		
		return dateStr;
	}
});

<!-- 오더세트 트리뷰 함수 시작 -->
$(function () {

	//노드정보를 저장하기 위한 변수
	var data = [];
	
    // 페이지 로딩시 tree구조 화면에 랜더링
    renderTree();

 	// 트리구조를 비동기통신 방식으로 서버에서 받아온 후 설정해주는 함수
	function renderTree() {
 		
 		data = [];
 		
        $.ajax({
            url: "/orderSet/getOrderSetList",
            dataType: "json",
            type: "post",
            beforeSend:function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
			},
            success: function(rst) {
            	
            	console.log("불러온 오더세트VO 리스트 : ", rst);
            	
                $.each(rst, function (idx, chart) {
                	
                	// 트리뷰 한 줄에대한 정보를 tempObj에 저장
                    let tempObj = {
                        id: chart.orderSetCd,
                        parent: chart.orderSetParcd,
                        text: chart.orderSetNm,
                        osty: chart.orderSetType,
                        orderCode: chart.orderSetOrdcd,
                        type: "file"
                    };
                	
                    if (tempObj.orderCode == null){
                    	tempObj.orderCode = "";
                    }
                    
                    // 오더세트 타입이 오더세트 오더파일이면
                    if (tempObj.osty == "OSTY01") {
                        tempObj.type = "folder";
                    }
                    // 오더세트 타입이 상병진단이면
                    if (tempObj.osty == "OSTY02") {
                        tempObj.type = "injury";
                    }
                    // 오더세트 타입이 약처방이면
                    if (tempObj.osty == "OSTY03") {
                        tempObj.type = "medicine";
                    }
                    // 오더세트 타입이 주사면
                    if (tempObj.osty == "OSTY04") {
                        tempObj.type = "injection";
                    }
                    // 오더세트 타입이 검사면
                    if (tempObj.osty == "OSTY05") {
                        tempObj.type = "test";
                    }
                    // 오더세트 타입이 치료면
                    if (tempObj.osty == "OSTY06") {
                        tempObj.type = "treatment";
                    }
                    
                   	// 이렇게 설정된 노드1개의 정보를 위에서 선언한 data배열에 추가
                    data.push(tempObj);
                });
                
                // js트리를 한번 부순 후 생성
                $(".orderset-body").jstree('destroy');
                
                // 위에서 설정된 data를 이용해 트리구조 생성
                $(".orderset-body").jstree({
                    core: {
                        data: data,
                        check_callback: true
                    },
                    plugins : ["dnd", "search", "types", "checkbox"],
                    types : {
                        'folder' : {
                        	"checkbox" : false,
                            "icon" : "/resources/images/icons/icon-folder.png"
                        },
                        'file' : {
                            "icon" : "/resources/images/icons/icon-file.png",
                        },
                        'injury' : {
                            "icon" : "/resources/images/icons/icon-injury.png",
                        },
                        'medicine' : {
                            "icon" : "/resources/images/icons/icon-medicine.png",
                        },
                        'treatment' : {
                            "icon" : "/resources/images/icons/icon-treatment.png",
                        },
                        'test' : {
                            "icon" : "/resources/images/icons/icon-test.png",
                        },
                        'injection' : {
                        	"icon" : "/resources/images/icons/icon-injection.png",
                        },
                        default: {
                            "icon": "/resources/images/icons/icon-file.png"
                        }
                    }
                });
            },
            error: function(xhr, status, error){
				console.log('Error:', xhr, status, error);
			}
        });
    }
 	
 	
 	// 오더세트 추가 버튼 누를 시 모달창 띄우기
	$('#createOrderset').on('click', function () {
        $('#createOrdersetModal').modal('show');
        // 오더세트를 연속으로 추가할 때 이전에 남아있던 배열이 있을 수 있어서 한번 초기화
        data = [];
    });

 	
	// 모달 저장버튼 누를시 
	$(document).on('click', '#btnAddOrderset', function(){
		
		// 만약 오더세트 이름이 입력이 안됐으면 alert를 띄운다
		if($('#ordersetName').val() == ""){
			Swal.fire({
				title: '오더세트 이름을 입력해주세요',
				icon: 'warning',
				confirmButtonColor: '#0ABAB5',
				confirmButtonText: '확인',
			})
		}
		
		// 지금 선택된 값이 오더인지 오더세트인지 확인
		// 오더세트면 부모노트를 #로, 오더세트타입을 오더세트묶음으로
		if($('#ordersetType').val() === '오더세트'){
			
			data = {
				'orderSetParcd' : '#',
				'orderSetType' : 'OSTY01',
				'orderSetNm' : $('#ordersetName').val()
			}
		// 오더면 부모노드를 선택된 부모 노드코드로, 오더세트타입을 선택된 값으로
		} else if($('#ordersetType').val() === '오더'){
			
			// 만약 상위오더세트가 없을 때
			if($('#ordersetPar option:selected').data('ordersetcd') == null){
				Swal.fire({
					title: '상위 오더세트가 존재하지 않습니다',
					icon: 'warning',
					confirmButtonColor: '#0ABAB5',
					confirmButtonText: '확인',
				})
			}
			
			// 만약 오더를 안골랐으면
			if($('#searchOrderset').length){
				Swal.fire({
					title: '추가할 오더를 선택해주세요',
					icon: 'warning',
					confirmButtonColor: '#0ABAB5',
					confirmButtonText: '확인',
				})
			}
			
			// 오더세트 카테고리, 만약 주사를 선택시 카테고리가 주사로 들어감
			orderSetType = $('#ordersetCategory option:selected').data('type');
			if($('.table-result td').eq(2).text() == '주사'){
				orderSetType = 'OSTY04';
			}
			
			data = {
				// 부모의 orderSetCd값 가져오기
				'orderSetParcd' : $('#ordersetPar option:selected').data('ordersetcd'),
				// 오더분류값(처방인지 뭔지,.)
				'orderSetType' : orderSetType,
				// 설정할 이름
				'orderSetNm' : $('#ordersetName').val(),
				// 오더코드값
				'orderSetOrdcd' : $('.table-result td').eq(0).text()
			}
		}
		
		$.ajax({
			url: '/orderSet/createOrderSet',
			data: JSON.stringify(data),
			contentType:"application/json;charset=utf-8",
			dataType: 'json',
			type: 'post',
			beforeSend:function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
			},
			success: function(rst){
				console.log("오더세트 create의 rst : ", rst);
				
				// 모달 내용 초기화
				resetOrdersetModal();
				
				// 모달 숨기기
				$("#createOrdersetModal").modal("hide");
				$(".fade").attr('style', 'display: none');
				
				// 오더세트 내용 갱신
				renderTree();
				
				// sweetalert2 띄우기
				Swal.fire({
					title: '오더세트 추가가 완료되었습니다',
					icon: 'success',
					confirmButtonColor: '#0ABAB5',
					confirmButtonText: '확인',
				})
			},
			error: function(xhr, status, error){
				console.log('Error:', xhr, status, error);
			}
		});
	});
	// 모달 종료시 모달 내용 초기화
	$(document).on('click', '#btnCancelOrderset', resetOrdersetModal);
 	
	function resetOrdersetModal(){
		
		// 카테고리 선택 다시 활성화
		$("#ordersetCategory").prop("disabled", false);
		
		$('#ordersetType').val('오더세트');
		$('.addOrderset-body').html('');
		$('#ordersetName').val('');
	}
	
 	// 오더세트 추가 모달에서 오더세트 유형 변경 시 실행되는 함수(오더세튼지 오더인지에 따라 받는값이 다름)
	$(document).on('change', '#ordersetType', function(){
    	
		// 오더세트 클릭시
		if($("#ordersetType option:selected").data("type") == 'orderset'){
			$('.addOrderset-body').html("");
		}
		
		// 오더 클릭시
		if($("#ordersetType option:selected").data("type") == 'order'){
			
			// 오더세트묶음 목록을 불러온다음 최상위 노드만 골라서 상위오더세트 목록에 출력
			$.ajax({
				url: '/orderSet/getOrderSetList',
				dataType: 'json',
				type: 'post',
				beforeSend:function(xhr){
					xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
				},
				success: function(rst){
					console.log("불러온 오더세트VO 리스트 : ", rst);
					
					let cont = '';
					cont += '<div class="dduk-row">';
					cont += '<div class="dduk-login-d">';
					cont += '<div class="login-input-label">오더분류</div>';
					cont += '<div role="group">';
					cont += '<span>';
					cont += '<select class="order-select" id="ordersetCategory" name="ordersetCategory">';
					cont += '<option>오더세트 카테고리 선택</option>';
					cont += '<option data-type="OSTY02">상병</option>';
					cont += '<option data-type="OSTY05">검사</option>';
					cont += '<option data-type="OSTY03">처방</option>';
					cont += '<option data-type="OSTY06">치료</option>';
					cont += '</select>';
					cont += '</span>';
					cont += '</div>';
					cont += '</div>';
					cont += '<div class="dduk-login-d">';
					cont += '<div class="login-input-label">상위오더세트</div>';
					cont += '<div role="group">';
					cont += '<span>';
					cont += '<select class="order-select" id="ordersetPar" name="ordersetPar">';
					
					$.each(rst, function(index, orderSetVO){
						// 만약 최상위 노드(오더세트 묶음) 이면
						if(orderSetVO.orderSetParcd == '#'){
							// 트리구조에 오더세트 묶음 이름 추가 및 오더세트코드를 숨겨둠
							cont += '<option data-orderSetCd='+orderSetVO.orderSetCd+'>'+orderSetVO.orderSetNm+'</option>';
						}
					})
					
					cont += '</select>';
					cont += '</span>';
					cont += '</div>';
					cont += '</div>';
					cont += '</div>';
					cont += '<div class="dduk-row">';
					cont += '<div class="dduk-login-d">';
					cont += '<div class="login-input-label">오더검색</div>';
					
					// 검색창 시작
					cont += '<div class="input-search-wrap">';
					cont += '<div id="orderSetSearch" class="input-search">';
					cont += '<input type="text" id="searchOrderset" class="input-search-value" autocomplet="off" />';
					cont += '<img src="/resources/images/icons/arrow.png" class="arrow"/>';
					cont += '</div>';
					cont += '<table class="table-search" border="1">';
					cont += '<tbody class="tbody-search">';
					cont += '</tbody>';
					cont += '</table>';
					cont += '</div>';
					// 검색창 끝
					
					cont += '</div>';
					cont += '</div>';
					
					$('.addOrderset-body').html(cont);
				},
				error: function(xhr, status, error){
					console.log('Error:', xhr, status, error);
				}
			});
		}
    });
 	
 	
 	// 오더세트 추가 검색기능 시작
 	// 검색시 검색 목록을 넣어주기 위한 배열
	var dataList = [];
	// 검색 결과 테이블의 크기 설정을 위한 변수
	let width = [];
 	
 	
 	// 오더세트의 오더 카테고리를 변경하면 selectedIndex를 변경
 	$(document).on('change', '#ordersetCategory', function(){
 		
 		let selected = $("#ordersetCategory option:selected").val();
 		let categoryUrl = "";
 		
 		switch (selected) {
 		case '오더세트 카테고리 선택':
 			categoryUrl = '';
 			width = [];
 			break;
        case '상병':
        	categoryUrl = '/orderSet/getInjuryVOList';
        	width = ['20px', '70px', '130px'];
            break;
        case '검사':
        	categoryUrl = '/orderSet/getTestVOList';
        	width = [];
            break;
        case '처방':
        	categoryUrl = '/orderSet/getMedicineVOList';
        	width = [];
            break;
        case '치료':
        	categoryUrl = '/orderSet/getTreatmentVOList';
        	width = [];
            break;
   		}
 		
 		// 만약 카테고리를 선택하지 않았으면
 		if(categoryUrl == '') {
 			dataList = ['검색어를 선택해주세요'];
 		// 카테고리 선택시
 		} else {
 			// 우선 배열을 초기화
 			dataList = [];
 			// 선택한 카테고리에 따라 검색목록을 갱신
 			$.ajax({
 				url: categoryUrl,
 				dataType: 'json',
 				type: 'post',
 				beforeSend:function(xhr){
					xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
				},
				success: function(rst){
					console.log('오더세트 추가 에서 오더카테고리에 따른 검색 풀 : ' , rst);
					
					// vo만큼 순회
					$.each(rst, function(index, vo){
						// 한 vo안의 모든 정보들을 담기위한 변수 
						let str = "";
						// vo안의 데이터 만큼 순회
						$.each(vo, function(index, column){
							// 검사일 때 가격은 안담아야됨
							// 처방일 때 약분류, 재고, 제조사, 보험적용여부, 총함량은 안가져와도 됨
							// 치료일 때 가격이랑 보험적용여부는 필요 없음
							if(index != 'testPrice' &&
							   index != 'mediType' && index != 'mediStock' && index != 'mediMaker' && index != 'insuYn' && index != 'mediCont' && index != 'mediPrice' &&
							   index != 'tmPrice' && index != 'insuYn'){
								str += (column + ',');
							}
						});
						
						dataList.push(str);
					});
					
					console.log("갱신된 검색 풀", dataList);
					
					updateResultTable(dataList, width);
				},
				error: function(xhr, status, error){
					console.log('Error:', xhr, status, error);
				}
 			});
 		}
 	});
 	
 	
 	// 오더세트 추가 모달에서 오더세트 검사 함수
 	// 검색창에서 단어를 입력할 때 마다 실행
	$(document).on('keyup', '#searchOrderset', function() {
		let value = $('#searchOrderset').val().trim();
		let matchDataList = dataList.filter((label) => label.includes(value));
		updateResultTable(matchDataList, width);
	});
 	
 	
 	// 검색결과의 배열인 data를 이용해서 테이블로 만들어주는 함수
 	// data에는 검색결과의 배열이 들어오고
 	// width에는 내가 주고       싶은 각각의 td값의 width를 넣으면 된다
 	function updateResultTable(data, width){
 		$('.tbody-search').html('');
 		let cont = "<tr>";
 		
 		// 우선 배열의 길이만큼 실행
 		$.each(data, function(index, str){
 			// ,를 정규식으로 만들어줌
 			let regex = new RegExp(',', 'g');
 			// 배열의 한 요소에서 , 의 개수를 파악 후 그 개수만큼 반복
 			let matches = str.match(regex);
 			let repeat = matches.length;
 			
 			// 배열 안의 구문자(,)의 개수만큼 실행 = td(컬럼)의 개수
 			for(let i = 0; i < repeat; i++){
 				let value = str.split(',')[i];
 				cont += "<td class='option' style='width:"+width[i]+"'>"+value+"</td>"
 			}
 			
 			cont += "</tr>"
 		})
 		
 		$('.tbody-search').append(cont);
 	}
 	
 	
	// 검색결과를 선택 시 검색결과 숨기기/보이기 및 선택한 결과를 반영
	$(document).on('click', '.option', function(){
		toggleTableSearch();
		getDataValue($(this));
	});
	// 화살표 선택 시 검색결과 숨기기/보이기
	$(document).on('click', '.arrow', toggleTableSearch);


	// css를 이용해 검색창 숨기기/보이기
	function toggleTableSearch(){
		
		// 만약 배열의 길이가 0이면(검색 결과가 없으면) 함수를 종료시켜서 미리보기가 안되도록 함
		if(dataList.length === 0){
			return;
		}
		
		let $tableSearch = $('.table-search');
	    $tableSearch.toggleClass('active');
	}


	// 오더 목록에서 검색결과를 input창에 대신 넣어버리기
	function getDataValue(clickedOption) {
		
		// 이제 더이상 카테고리를 바꾸면 안되므로 막아놓음
		$("#ordersetCategory").prop("disabled", true);
		
		let clone = clickedOption.closest('tr').html();
		let cont = '<table class="table-result"><tr>' + clone + '<tr></table>';
		$('#orderSetSearch').html(cont);
		
		let tds = $('.table-result tr td');
		$.each(tds, function(index){
			tds.eq(index).attr('class', 'orderset-search-result-fixed');
		});
		
		// 만약 이름을 아직 안지었다면 이름을 오더세트 이름쪽에 넣어주기
		if($('#ordersetName').val() == ''){
			$('#ordersetName').val($('.table-result tr td').eq(1).text());
		}
	}
 	// 오더세트 추가 검색기능 끝
 	
 	
 	// 선택한 노드를 삭제해주는 함수
 	$('#trashbin').on('click', function() {
 		
 		Swal.fire({
			title: '선택된 오더세트들을 삭제하시겠습니까???',
			icon: 'warning',
			showCancelButton: true,
			confirmButtonColor: '#0ABAB5',
			cancelButtonColor: '#8D9EA5',
			confirmButtonText: '확인',
			cancelButtonText: '취소'
		}).then((result) => {
			// 확인버튼 클릭시
			if (result.isConfirmed) {
				// 현재 선택한 모든 노드들을 가져옴
				const delArr = $(".orderset-body").jstree(true).get_selected(true);
				// 삭제할 노드들의 정보를 담을 배열
                const data = [];
             	// 선택된 각 노드에 대해 순회하며 처리
                delArr.forEach(delNode => {
                    data.push({
                        orderSetCd : delNode.id
                    });
                });
             	
             	console.log('data : ', data);
             	
             	// db에서 제거 후 제거 성공시 성공알림 띄우기 및 새로고침
                $.ajax({
                    url: "/orderSet/deleteOrderSet",
                    contentType: "application/json; UTF-8",
                    dataType: "json",
                    data: JSON.stringify(data),
                    type: "post",
                    beforeSend:function(xhr){
    					xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
    				},
                    success: function(rst){
                    	
                    	console.log("오더세트 삭제 결과 : ", rst);
                    	
                    	// 삭제완료처리
                    	Swal.fire({
                			title: '오더세트가 성공적으로 삭제되었습니다',
                			icon: 'success',
                			confirmButtonColor: '#0ABAB5',
                			confirmButtonText: '확인',
                		})
                		
                		// 트리뷰 갱신
                		renderTree();
                    }
                });
            };
		});
 	});
 	
 	
 	// 오더세트 검색을 위한 함수
 	// 검색창의 값이 입력될 때 마다 검색
    $("#keyword").on("input", function(event) {
    	// 입력된 값 가져오기
        let keyword = $(this).val();
		// jstree의 내장함수를 이용해 검색결과에 효과를 주는부분
        $(".orderset-body").jstree(true).search(keyword);
    });
});
<!-- 오더세트 트리뷰 함수 끝 -->
</script>