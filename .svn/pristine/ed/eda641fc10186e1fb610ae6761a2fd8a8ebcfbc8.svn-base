<%@ page language="java" contentType="text/html; charset=UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags"  %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>

<style>
.chart1 {
	height: 100%;
	width: 20%;
}

.chart2 {
	height: 100%;
	width: 60%;
}

.chart3 {
	height: 48.5%;
	width: 100%;
}

.chart4 {
	margin-top: 6%;
	height: 48.5%;
	width: 100%;
}

.chart-wrap {
	height: 100%;
	width: 20%;
}

.div-info-top {
	margin-top: 10%;
	display:flex;
	justify-content: space-around;
	color: #F8F9FC;
}

.div-info {
	display:flex;
	justify-content: space-around;
}

.div-info:hover {
	background-color: #EDF8F9;
}

.div-info p {
	margin-top:3%;
	margin-bottom:3%;
}

.info1 {
	width: 40px;
}

.info2 {
	width: 120px;
}

.info3 {
	width: 100px;
}

.selected {
    background-color: #EDF8F9;
}

.myhr {
	width: 954px;
	height: 1px;
	flex-shrink: 0;
	background: #EBEFF0;
	margin-left: -24px;
}

.aside-ams-patient{
	width: 196px;
	border-radius: 16px 0px 0px 16px;
	background: var(--bg-02, #DBF2F4);
	height: 56px;
	border-right: 4px solid var(--ci-01, #0ABAB5);
	margin-left: 4px;
	color: var(--ci-01, #0ABAB5);
}

.patient-detail {
	width: 892px;
	height: 100%;
	flex-shrink: 0;
}	
.patient-note {
	width: 360px;
}

.search{
	background-image: url(/resources/images/Search.png);
	background-repeat: no-repeat;
	background-position: 252px center;
	width: 292px;
	height: 48px;
}

.record-input{
	background-image: url(/resources/images/Arrowupward.png);
	background-repeat: no-repeat;
	background-position: 272px center;
	width: 312px;
	height: 48px;
}

.dduk-vertical-line {
	height: 642px;
	margin-top: -18px;
	margin-left: 272px;
}

hr{
	margin: -8px 0 16px -16px;
	background: var(--border, #EBEFF0);
	height: 1px;
}

.record-content-fr {
	height: 343px;
}

.notice-text {
	height: 100%;
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    font-size: 1.7em;
}

.gap-ver-16 {
	height: 94.5%;
}

.record-content-fr {
	height: 100%;
	width: 284px; 
}

.btn-state {
	font-size: 10.9px;
    padding: 4px 8px;
    margin-left: 3.25px;
    width: 100%;
}
</style>

<div class="dduk-body-border patient-list">
		<div>
			<div class="dduk-title-area">
				<h2>대기환자 목록</h2>
			</div>
			<div class="dduk-x-pd8">
				<table class="patient-list-table" id="waitingQueue">
					<tr class="tr-padding">
						<th class="td-padding gray-text" style="width:40px;">No</th>
						<th class="td-padding gray-text paName" style="width:90px;">이름</th>
						<th class="td-padding gray-text" style="width:90px">생년월일</th>
						<th class="td-padding gray-text" style="text-align:center">상태</th>
					</tr>
				</table>
			</div>	
		</div>
	</div>
	
	<div class="dduk-body-border patient-detail"  style="position: relative;">
		<div class="dduk-title-area spa-betw">
			<div class="d-flex align-items-center">
				<h2 id="paName">환자를 선택해주세요</h2>
				<span id="paInfo" class="gray-text mar-b-8 mar-l-8"></span>
			</div>
				<div class="d-flex">
					<div class="d-flex patient-info" style="margin-left:-5%; margin-right:5%">
						<div class="d-flex">
							<span class="gray-text">신장&nbsp;&nbsp;</span><div id="paHeight">--</div>
						</div>
						<div class="d-flex">
							<span class="gray-text">체중&nbsp;&nbsp;</span><div id="paWeight">--</div>
						</div>
						<div class="d-flex">
							<span class="gray-text">혈액형&nbsp;&nbsp;</span><div id="paBldType">--</div>
						</div>
					</div>
					<button class="dduk-btn-normal">상세보기</button>
				</div>
		</div>
		<hr style="width: 892px;">
		<div class="d-flex">
			<div class="dduk-history">
				<div style="height: 90%">
					<div class="subTitle-margin">
						<h2>진료 이력</h2>
					</div>
					<div class="history-scroll">
						<!-- 환자 진료내역 들어오는곳 -->
						<div class="notice-text">환자를 선택해주세요</div>
					</div>
				</div>
			</div>
			<!-- 진료진행 -->
			<div class="patient-record" id="currentRecord">
				<div class="subTitle-margin">
					<h2>진료 기록</h2>
				</div>
				<div class="gap-ver-16">
					<div class="dduk-inner-border record-content-fr w-100">
						<h3>진단명</h3>
						<input type="text" class="dduck-input">
					</div>
				</div>
			</div>
			<!-- 진료진행 끝 -->
			<!-- 진료기록조회 -->
			<!-- id="pastRecord" -->
			<!-- 진료기록조회끝 -->
		</div>
		
	</div>
	
	<div class="dduk-body-border patient-note">
		<div class="subTitle-margin mar-b-8">
			<h3>환자 기록</h3>
		</div>
		<div class="spa-betw flex-d-col" style="height: 760px;">
			<div class="gap-ver-32 w-100 p-8">
				<div>
					<div class="d-flex">
						<img class="record-profile-img" src="/resources/images/Ellipse12.png"/>
						<div>
							<div>원무과 김한나</div>
							<div class="gray-text">2023-11-21(화) 12:33:42</div>
						</div>
					</div>
					<div class="d-flex justify-content-end">
						<div class="patient-record-chat mar-t-8">
							상시 복용 약품 없음 확인.
						</div>
					</div>
				</div>
				<div>
					<div class="d-flex">
						<img class="record-profile-img" src="/resources/images/Ellipse14.png"/>
						<div>
							<div>의사 전영균</div>
							<div class="gray-text">2023-11-21(화) 16:55:16</div>
						</div>
					</div>
					<div class="d-flex justify-content-end">
						<div class="patient-record-chat mar-t-8">
							진단서 발급, <br/>
							금주 금요일에 예약 잡아주세요.
						</div>
					</div>
				</div>
				<div>
					<div class="d-flex">
						<img class="record-profile-img" src="/resources/images/Ellipse13.png"/>
						<div>
							<div>원무과 이수정</div>
							<div class="gray-text">2023-11-21(화) 16:55:16</div>
						</div>
					</div>
					<div class="d-flex justify-content-end">
						<div class="patient-record-chat mar-t-8">
							샤이니 콘서트 예약 바랍니다.
						</div>
					</div>
				</div>
			<hr style="width:360px; margin-left: -24px;">
			<div class="gray-text" style="margin-top: -44px;
    margin-left: 102px;">2023-11-2(수)</div>
			</div>
			<input class="record-input dduck-input" placeholder="환자 기록을 추가해주세요">
		</div>
	</div>

<script>
$(function(){
	
	// 최초 1번 대기목록 갱신
	// 굳이 Ajax를 이용해 동적으로 추가하는 이유는 Websocket을 이용해 실시간으로 대기 환자 갱신을 위해
	loadReceptionList();

	
	// 대기환자 클릭시 이벤트
	$(document).on("click", ".tr-paInfo", function() {
		
		let paNo = $(this).data('pano');
		
		// 환자의 진료를 시작할건지 물어본다(SweetAlert2)
		Swal.fire({
			title: '진료를 시작하시겠습니까???',
			icon: 'question',
			showCancelButton: true,
			confirmButtonColor: '#0ABAB5',
			cancelButtonColor: '#8D9EA5',
			confirmButtonText: '확인',
			cancelButtonText: '취소'
		}).then((result) => {
			// 확인버튼 클릭시
			if (result.isConfirmed) {
            	// 이전에 선택된 요소의 클래스 초기화
                $(".tr-paInfo").removeClass("selected");
                // 현재 클릭한 요소에 select클래스 추가
                $(this).addClass("selected");
                // 클릭한 환자의 진료목록 갱신
                simpleClinicChartList(paNo);
                // 최초 클릭시 진료진행
			}
		})
    });
	
	
	// 환자의 진료정보를 클릭할 시 이벤트(진료상세 출력)
	$(document).on("click", ".dduk-history-list", function(){
		
		let clinicNo = $(this).data("clinicno");
		
		// 이전에 선택된 요소의 클래스 초기화
        $(".dduk-history-list").removeClass("selected");
        // 현재 클릭한 요소에 select클래스 추가
        $(this).addClass("selected");
	});
	
	
	// 환자 대기목록 갱신
	function loadReceptionList(){
		$.ajax({
			url: '/reception/getReceptionList',
			dataType: 'json',
			type: 'post',
			beforeSend:function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
			},
			success: function(rst){
				
				console.log("rst", rst);
				
				$.each(rst, function(index){
					let paInfo = "";
					paInfo += '<tr class="tr-padding tr-paInfo" data-paNo='+rst[index].paNo+'>';
					paInfo += '<td class="td-padding">'+(index + 1)+'</td>';
					paInfo += '<td height="48px" class="td-padding">'+truncateText(rst[index].paName, 4)+'</td>';
					paInfo += '<td class="td-padding">'+ formatResidentNumber(rst[index].paReg) +'</td>';
					paInfo += '<th class="td-padding">';
					
					paInfo += '<button class="dduk-btn-disabled btn-state">대기중</button>';
					paInfo += '<button class="dduk-btn-info btn-state">진료중</button>';
					paInfo += '<button class="dduk-btn-normal btn-state">검사중</button>';
					paInfo += '<button class="dduk-btn-active btn-state">검사완료</button>';
					
					
					paInfo += '</th>';
					paInfo += '</tr>';
					
					$('#waitingQueue').append(paInfo);
				});
			},
			error: function(xhr, status, error){
				console.log('Error:', xhr, status, error);
			}
		});
	}
	
	
	// 환자의 진료목록 갱신
	function simpleClinicChartList(paNo){
		$.ajax({
			url: '/clinic/simpleClinicChartList',
			dataType: 'json',
			type: 'post',
			data: {"paNo": paNo},
			beforeSend:function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
			},
			success: function(rst){
				
				console.log("rst", rst);
				
				// 환자 정보 출력
				let paBirthDay = formatResidentNumber(rst.paReg);
				let paAge = getAge(paBirthDay);
				$('#paName').html(rst.paName);
				$('#paInfo').html(rst.paSex + ", "+paAge+"세("+paBirthDay+")");
				$('#paHeight').html(rst.paHeight + "cm");
				$('#paWeight').html(rst.paWeight + "kg");
				$('#paBldType').html(rst.paBldType + "형");
				
				// 진료 이력 초기화
				$('.history-scroll').html("");
				
				// 진료 이력이 없을시 없다는 메시지 출력
				if(rst.clinicChartVOList[0].clinicNo == null){
					$('.history-scroll').append('<div class="notice-text">진료 이력이 없습니다</div>');
				} else {
					
					// 진료 이력이 있을시 화면에 출력
					$.each(rst.clinicChartVOList, function(index){
						// 진료일자
						let clinicDate = formatDateString(rst.clinicChartVOList[index].clinicDt);
					
						let paClinicList = "";
					
						paClinicList += '<div class="dduk-history-list" data-clinicNo='+rst.clinicChartVOList[index].clinicNo+'>';
						paClinicList += '<div class="history-array">';
						paClinicList += '<div>';
						paClinicList += '<div class="history-title">내원·'+clinicDate+'</div>';
						paClinicList += '<div>담당의 '+ rst.clinicChartVOList[index].empName+'</div>';
						paClinicList += '</div>';
						paClinicList += '</div>';
						paClinicList += '<div class="d-flex history-btn-list">';
						paClinicList += '<span class="history-btn">진료</span>';
						// 진료정보의 첫번째 vo를 뒤져봤는데 의약품 정보가 없을 때(처방을 안받았을 때)					
						if(rst.clinicChartVOList[index].testOrderVOList[0].testCd != null){
							paClinicList += '<span class="history-btn">검사</span>';
						}
						// 진료정보의 첫번째 vo를 뒤져봤는데 의약품 정보가 없을 때(처방을 안받았을 때)					
						if(rst.clinicChartVOList[index].treatmentOrderVOList[0].tmCd != null){
							paClinicList += '<span class="history-btn">치료</span>';
						}
						// 진료정보의 첫번째 vo를 뒤져봤는데 의약품 정보가 없을 때(처방을 안받았을 때)					
						if(rst.clinicChartVOList[index].medicineOrderVOList[0].mediCd != null){
							paClinicList += '<span class="history-btn">처방</span>';
						}
						paClinicList += '</div>';
						paClinicList += '</div>';
					
						$('.history-scroll').append(paClinicList);
					});
				
				}
			},
			error: function(xhr, status, error){
				console.log('Error:', xhr, status, error);
			}
		});
	}
	
	
	// 주민번호를 생년월일로 변환
	function formatResidentNumber(residentNumber) {
		
		// 00~39년생은 20을 붙이고 그 외엔 19를 붙인다
	    let year = "";
	    if(Number(residentNumber.substr(0,1)) <= 3){
	    	year += "20";
	    } else {
	    	year += "19";
	    }
	    year += residentNumber.substr(0,2);
	    
	    
	    let month = residentNumber.substr(2,2);
	    let day = residentNumber.substr(4,2);
	    
	    let birthDay = year + "-" + month + "-" + day;
	    return birthDay;
	}
	
	
	// 주민번호로 만나이 계산
	function getAge(paBirthDay) {
		
		// 현재날짜, 생일로 날짜계산
	    const currentDate = new Date();
	    const birthdateDate = new Date(paBirthDay);
	    let age = currentDate.getFullYear() - birthdateDate.getFullYear();

	    // 현재와 생일의 월, 날짜 얻어주기
    	const currentMonth = currentDate.getMonth();
    	const birthdateMonth = birthdateDate.getMonth();
    	const currentDay = currentDate.getDate();
    	const birthdateDay = birthdateDate.getDate();

    	// 현재 날짜가 생년월일보다 앞 날짜면 아직 생일이 오지 않은 상태임(한살빼기)
    	if (currentMonth <= birthdateMonth && currentDay < birthdateDay) {
       		age--;
    	}

	    return age;
	}
	
	
	// 이름 등이 글자를 제어하고 싶을 때 maxLength까지만 표시
	function truncateText(text, maxLength) {
		if (text.length > maxLength) {
			return text.slice(0, maxLength) + '...';
		} else {
		    return text;
		}
	}
	
	
	// 날짜형식 데이터를 넣으면 yyyy-MM-dd(요일) 로 변환해주는 함수
	function formatDateString(dateString) {
		// 요일먼저 얻기
		const week = ['일', '월', '화', '수', '목', '금', '토'];
		const dayOfWeek = week[new Date(dateString).getDay()];
		
		const dateData = new Date(dateString);
		let year = dateData.getFullYear();
		let month = dateData.getMonth(); 
		let date = dateData.getDate()
		
		let dateStr = `\${year}-\${month}-\${date}(\${dayOfWeek})`;
		
		return dateStr;
	}
});
</script>